/////callbacks:
from dash.dependencies import Input, Output, State
import dash
from functions_remote import handle_movement, emergency_stop, leer_datos_serial, control_new_motor, capture_image, save_image, is_wifi_connected, sensor_distances
from dash import html

# Variables para almacenar las imágenes
images_before = []
images_after = []

def register_callbacks(app):

    # Callbacks para el control del MOVIMIENTO robot 
    @app.callback(
        [Output('status-div', 'children')] +
        [Output(f'{btn_id}-btn', 'className') for btn_id in ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']],
        [Input(f'{btn_id}-btn', 'n_clicks_timestamp') for btn_id in ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']] + 
        [Input('emergency-stop-btn', 'n_clicks'),
         Input('start-forward-btn', 'n_clicks'),
         Input('start-reverse-btn', 'n_clicks'),
         Input('stop-btn', 'n_clicks'),
         Input('pwm-slider', 'value')],
        prevent_initial_call=True
    )
    def update_output(*args):
        ctx = dash.callback_context

        if not ctx.triggered:
            return ["No buttons yet clicked"] + [""] * 6
        
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        action = button_id.replace('-btn', '').replace('rotate-right', 'rotate_right').replace('rotate-left', 'rotate_left')
        
        if button_id == 'emergency-stop-btn':
            control_new_motor('stop', 0)
            emergency_stop()
            return ["EMERGENCY STOP ACTIVATED!"] + [""] * 6

        pwm_value = args[-1]  # The last argument is the PWM slider value

        if button_id == 'start-forward-btn':
            control_new_motor('start_forward', pwm_value)
            return [f"Motor arrancado adelante al {pwm_value}% PWM"] + [""] * 6
        elif button_id == 'start-reverse-btn':
            control_new_motor('start_reverse', pwm_value)
            return [f"Motor arrancado en reversa al {pwm_value}% PWM"] + [""] * 6
        elif button_id == 'stop-btn':
            control_new_motor('stop', 0)
            return ["Motor detenido"] + [""] * 6

        # Update motors
        handle_movement(action)
        
        # Determine the active button
        btn_ids = ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']
        active_classes = ['active' if f'{btn}-btn' == button_id else '' for btn in btn_ids]
        
        return [f"{action.replace('_', ' ').capitalize()} iniciado"] + active_classes

    ####### WIFI STATUS 
    @app.callback(
        Output('wifi-status', 'children'),
        Input('interval-component', 'n_intervals')
    )
    def update_wifi_status(n):
        if is_wifi_connected():
            return html.Span("Conectado a WiFi", style={'color': 'green'})
        else:
            # Ejecutar paro y paro de emergencia si se detecta desconexión
            control_new_motor('stop', 0)
            emergency_stop()
            return html.Span("No Conectado a WiFi", style={'color': 'red'})

    # Callbacks para la captura de imágenes
    @app.callback(
        [Output('images-container-before', 'children'),
         Output('images-container-after', 'children')],
        [Input('capture-btn-before', 'n_clicks'),
         Input('capture-btn-after', 'n_clicks')],
        [State('images-container-before', 'children'),
         State('images-container-after', 'children')]
    )
    def handle_capture(before_clicks, after_clicks, children_before, children_after):
        global images_before, images_after

        ctx = dash.callback_context
        if not ctx.triggered:
            return children_before, children_after

        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        if button_id == 'capture-btn-before':
            images_list = images_before
            prefix = "REMOTE_ANTES"
        else:
            images_list = images_after
            prefix = "REMOTE_DESPUES"

        # Capturar imagen y actualizar la lista
        image_index = len(images_list) + 1
        if image_index > 17:
            image_index = 1
        image_name = f"{prefix}_{image_index}.jpg"
        new_image_data = capture_image(image_name)
        file_name = save_image(new_image_data, prefix, image_index)
        images_list.append(file_name)

        if button_id == 'capture-btn-before':
            images_before = images_list
            children_before = [html.Img(src=f'assets/{file_name}', style={'width': '100%', 'padding-top': '10px'}) for file_name in images_before]
            return children_before, children_after
        else:
            images_after = images_list
            children_after = [html.Img(src=f'assets/{file_name}', style={'width': '100%', 'padding-top': '10px'}) for file_name in images_after]
            return children_before, children_after

    # Callbacks para la lectura de sensores ARDUINO
    @app.callback(
        [Output('front-left-sensor', 'children'),
         Output('front-right-sensor', 'children'),
         Output('back-left-sensor', 'children'),
         Output('back-right-sensor', 'children'),
         Output('humidity', 'children'),
         Output('temperature', 'children')],
        [Input('interval-component', 'n_intervals')]
    )
    def update_sensors(n):
        datos = leer_datos_serial()
        if datos:
            detener_motores_si_lecturas_altas(datos)
            return [
                html.Div(f"Delante izquierdo: {datos[0]} cm", style={'color': 'white'}),
                html.Div(f"Delante derecho: {datos[1]} cm", style={'color': 'white'}),
                html.Div(f"Atrás izquierdo: {datos[2]} cm", style={'color': 'white'}),
                html.Div(f"Atrás derecho: {datos[3]} cm", style={'color': 'white'}),
                html.Div(f"Humedad: {datos[4]} %", style={'color': 'white'}),
                html.Div(f"Temperatura: {datos[5]} °C", style={'color': 'white'})
            ]
        else:
            return ["Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos..."]

    ##### Callback para detener motores si el rango ultrasonico es mayor que 30 cm
    def detener_motores_si_lecturas_altas(datos):
        if (
            (float(datos[0]) > 30 and float(datos[1]) > 30) or
            (float(datos[2]) > 30 and float(datos[f3]) > 30) or
            (float(datos[0]) > 30 and float(datos[2]) > 30) or
            (float(datos[1]) > 30 and float(datos[3]) > 30)
        ):
            control_new_motor('stop', 0)
            emergency_stop()

    @app.callback(
        Output('ultrasonic-status', 'children'),
        [Input('interval-component', 'n_intervals')]
    )
    def check_ultrasonic_distances(n):
        datos = leer_datos_serial()
        if datos:
            detener_motores_si_lecturas_altas(datos)
            if (
                (float(datos[0]) > 30 and float(datos[1]) > 30) or
                (float(datos[2]) > 30 and float(datos[3]) > 30) or
                (float(datos[0]) > 30 and float(datos[2]) > 30) or
                (float(datos[1]) > 30 and float(datos[3]) > 30)
            ):
                return html.Span("Motores detenidos por distancia ultrasonica mayor a 30 cm", style={'color': 'red'})
        return html.Span("Distancias dentro de rango", style={'color': 'green'})

        







    ####### ULTASONICOS 2
    @app.callback(
        [Output('sensor-1', 'children'),
         Output('sensor-2', 'children')],
        [Input('interval-component', 'n_intervals')]
    )
    def update_sensor_readings(n):
        # Debugging line to check if the callback is triggered and the values are correct
        print(f"Updating UI - Sensor 1: {sensor_distances[0]} cm, Sensor 2: {sensor_distances[1]} cm")
        return f"Sensor 1: {sensor_distances[0]} cm", f"Sensor 2: {sensor_distances[1]} cm"
































































////////////callbacks:
from dash.dependencies import Input, Output, State
import dash
from functions_remote import handle_movement, emergency_stop, leer_datos_serial, control_new_motor, capture_image, save_image, is_wifi_connected, sensor_distances, StepperMotor
from dash import html

# Variables para almacenar las imágenes
images_before = []
images_after = []

def register_callbacks(app):


    # Callbacks para el control del MOVIMIENTO robot 
    @app.callback(
        [Output('status-div', 'children')] +
        [Output(f'{btn_id}-btn', 'className') for btn_id in ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']],
        [Input(f'{btn_id}-btn', 'n_clicks_timestamp') for btn_id in ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']] + 
        [Input('emergency-stop-btn', 'n_clicks'),
         Input('start-forward-btn', 'n_clicks'),
         Input('start-reverse-btn', 'n_clicks'),
         Input('stop-btn', 'n_clicks'),
         Input('pwm-slider', 'value'),
         Input('speed-slider', 'value')],
        prevent_initial_call=True
    )
    def update_output(*args):
        ctx = dash.callback_context

        if not ctx.triggered:
            return ["No buttons yet clicked"] + [""] * 6
        
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        action = button_id.replace('-btn', '').replace('rotate-right', 'rotate_right').replace('rotate-left', 'rotate_left')
        
        pwm_value = args[-2]  # The second last argument is the PWM slider value
        speed_value = args[-1]  # The last argument is the speed slider value

        # Update the shared delay value
        StepperMotor.shared_delay = speed_value

        if button_id == 'emergency-stop-btn':
            control_new_motor('stop', 0)
            emergency_stop()
            return ["EMERGENCY STOP ACTIVATED!"] + [""] * 6

        if button_id == 'start-forward-btn':
            control_new_motor('start_forward', pwm_value)
            return [f"Motor arrancado adelante al {pwm_value}% PWM"] + [""] * 6
        elif button_id == 'start-reverse-btn':
            control_new_motor('start_reverse', pwm_value)
            return [f"Motor arrancado en reversa al {pwm_value}% PWM"] + [""] * 6
        elif button_id == 'stop-btn':
            control_new_motor('stop', 0)
            return ["Motor detenido"] + [""] * 6

        # Update motors with the new speed value
        handle_movement(action)
        
        # Determine the active button
        btn_ids = ['forward', 'backward', 'left', 'right', 'rotate-right', 'rotate-left']
        active_classes = ['active' if f'{btn}-btn' == button_id else '' for btn in btn_ids]
        
        return [f"{action.replace('_', ' ').capitalize()} iniciado"] + active_classes

    @app.callback(
        Output('speed-slider-value', 'children'),
        [Input('speed-slider', 'value')]
    )
    def update_speed_value(speed_value):
        StepperMotor.shared_delay = speed_value
        return f"Velocidad de desplazamiento: {speed_value:.4f} segundos"










    ####### WIFI STATUS 
    @app.callback(
        Output('wifi-status', 'children'),
        Input('interval-component', 'n_intervals')
    )
    def update_wifi_status(n):
        if is_wifi_connected():
            return html.Span("Conectado a WiFi", style={'color': 'green'})
        else:
            # Ejecutar paro y paro de emergencia si se detecta desconexión
            control_new_motor('stop', 0)
            emergency_stop()
            return html.Span("No Conectado a WiFi", style={'color': 'red'})

    # Callbacks para la captura de imágenes
    @app.callback(
        [Output('images-container-before', 'children'),
         Output('images-container-after', 'children')],
        [Input('capture-btn-before', 'n_clicks'),
         Input('capture-btn-after', 'n_clicks')],
        [State('images-container-before', 'children'),
         State('images-container-after', 'children')]
    )
    def handle_capture(before_clicks, after_clicks, children_before, children_after):
        global images_before, images_after

        ctx = dash.callback_context
        if not ctx.triggered:
            return children_before, children_after

        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        if button_id == 'capture-btn-before':
            images_list = images_before
            prefix = "REMOTE_ANTES"
        else:
            images_list = images_after
            prefix = "REMOTE_DESPUES"

        # Capturar imagen y actualizar la lista
        image_index = len(images_list) + 1
        if image_index > 17:
            image_index = 1
        image_name = f"{prefix}_{image_index}.jpg"
        new_image_data = capture_image(image_name)
        file_name = save_image(new_image_data, prefix, image_index)
        images_list.append(file_name)

        if button_id == 'capture-btn-before':
            images_before = images_list
            children_before = [html.Img(src=f'assets/{file_name}', style={'width': '100%', 'padding-top': '10px'}) for file_name in images_before]
            return children_before, children_after
        else:
            images_after = images_list
            children_after = [html.Img(src=f'assets/{file_name}', style={'width': '100%', 'padding-top': '10px'}) for file_name in images_after]
            return children_before, children_after

    # Callbacks para la lectura de sensores ARDUINO
    @app.callback(
        [Output('front-left-sensor', 'children'),
        Output('front-right-sensor', 'children'),
        Output('back-left-sensor', 'children'),
        Output('back-right-sensor', 'children'),
        Output('humidity', 'children'),
        Output('temperature', 'children'),
        Output('battery-level', 'children')],
        [Input('interval-component', 'n_intervals')]
    )
    def update_sensors(n):
        datos = leer_datos_serial()
        if datos:
            detener_motores_si_lecturas_altas(datos)
            return [
                html.Div(f"Delante izquierdo: {datos[0]} cm", style={'color': 'white'}),
                html.Div(f"Delante derecho: {datos[1]} cm", style={'color': 'white'}),
                html.Div(f"Atrás izquierdo: {datos[2]} cm", style={'color': 'white'}),
                html.Div(f"Atrás derecho: {datos[3]} cm", style={'color': 'white'}),
                html.Div(f"Humedad: {datos[4]} %", style={'color': 'white'}),
                html.Div(f"Temperatura: {datos[5]} °C", style={'color': 'white'}),
                html.Div(f"Nivel de batería: {datos[6]} V", style={'color': 'white'})
            ]
        else:
            return ["Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos...", "Esperando datos..."]








    ##### Callback para detener motores si el rango ultrasonico es mayor que 30 cm
    def detener_motores_si_lecturas_altas(datos):
        if (
            (float(datos[0]) > 30 and float(datos[1]) > 30) or
            (float(datos[2]) > 30 and float(datos[3]) > 30) or
            (float(datos[0]) > 30 and float(datos[2]) > 30) or
            (float(datos[1]) > 30 and float(datos[3]) > 30)
        ):
            control_new_motor('stop', 0)
            emergency_stop()

      







    ####### ULTASONICOS 2
    @app.callback(
        [Output('sensor-1', 'children'),
         Output('sensor-2', 'children')],
        [Input('interval-component', 'n_intervals')]
    )
    def update_sensor_readings(n):
        # Debugging line to check if the callback is triggered and the values are correct
        print(f"Updating UI - Sensor 1: {sensor_distances[0]} cm, Sensor 2: {sensor_distances[1]} cm")
        return f"Sensor 1: {sensor_distances[0]} cm", f"Sensor 2: {sensor_distances[1]} cm"







//////ui_df:


from dash import Dash, html, dcc
import dash_bootstrap_components as dbc
from callbacks_remote import register_callbacks

# Crear el layout de Dash
def create_layout():
    return html.Div([
        dcc.Interval(id='interval-component', interval=1*1000, n_intervals=0),
        html.H1("Control Remoto del Robot", className="header-title"),
        html.Div(id='wifi-status', className='status-div', style={'marginTop': '10px', 'textAlign': 'center'}),
        html.Div([
            html.Div("Humedad: X %", id='humidity', className='sensor-data', style={'backgroundColor': 'blue', 'color': 'white', 'textAlign': 'center', 'padding': '10px'}),
            html.Div("Temperatura: X °C", id='temperature', className='sensor-data', style={'backgroundColor': 'red', 'color': 'white', 'textAlign': 'center', 'padding': '10px'}),
        ], style={'display': 'flex', 'justifyContent': 'space-around', 'alignItems': 'center', 'margin': '20px 0'}),
        html.Div("Nivel de batería: X V", id='battery-level', className='sensor-data', style={'backgroundColor': 'green', 'color': 'white', 'textAlign': 'center', 'padding': '10px', 'marginBottom': '20px'}),
        html.Div([
            html.Label("PWM velocidad del rodillo", style={'textAlign': 'center', 'width': '100%'}),
            html.Div([
                dcc.Slider(
                    id='pwm-slider',
                    min=1,
                    max=100,
                    step=1,
                    value=50,
                    marks={i: f'{i}%' for i in range(0, 101, 10)},
                    className='slider',
                    updatemode='drag'
                )
            ], style={'width': '80%', 'margin': 'auto'})
        ], style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'margin': '20px 0'}),
        html.Div([
            html.Label("Velocidad de desplazamiento", style={'textAlign': 'center', 'width': '100%'}),
            html.Div([
                dcc.Slider(
                    id='speed-slider',
                    min=0.0001,
                    max=0.001,
                    step=0.0001,
                    value=0.0005,
                    marks={i: f'{i:.4f}' for i in [0.0001, 0.0005, 0.0010]},
                    className='slider',
                    updatemode='drag'
                ),
                html.Div(id='speed-slider-value', style={'textAlign': 'center', 'marginTop': '10px'})
            ], style={'width': '80%', 'margin': 'auto'})
        ], style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'margin': '20px 0'}),
        html.Div([
            dbc.Button("ARRANQUE DELANTE", id='start-forward-btn', className='remote-btn', style={'width': '30%', 'height': '50px', 'margin': '5px'}),
            dbc.Button("ARRANQUE REVERSA", id='start-reverse-btn', className='remote-btn', style={'width': '30%', 'height': '50px', 'margin': '5px'}),
            dbc.Button("PARO", id='stop-btn', className='remote-btn', style={'width': '30%', 'height': '50px', 'margin': '5px'}),
        ], style={'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'margin': '10px 0'}),
        dbc.Container([
            html.Div([
                html.Div("Delante izquierdo: X cm", id='front-left-sensor', className='sensor-data', style={'backgroundColor': 'green', 'color': 'white', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'front-left'}),
                dbc.Button("ADELANTE", id='forward-btn', className='remote-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'forward'}),
                html.Div("Delante derecho: X cm", id='front-right-sensor', className='sensor-data', style={'backgroundColor': 'green', 'color': 'white', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'front-right'}),
                dbc.Button("IZQUIERDA", id='left-btn', className='remote-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'left'}),
                html.Div("Sensor 1: X cm", id='sensor-1', className='sensor-data', style={'backgroundColor': 'yellow', 'color': 'black', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'left-sensor'}),
                dbc.Button("ROTAR IZQUIERDA", id='rotate-left-btn', className='remote-btn rotate-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'rotate-left'}),
                dbc.Button("ROTAR DERECHA", id='rotate-right-btn', className='remote-btn rotate-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'rotate-right'}),
                dbc.Button("DERECHA", id='right-btn', className='remote-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'right'}),
                html.Div("Sensor 2: X cm", id='sensor-2', className='sensor-data', style={'backgroundColor': 'yellow', 'color': 'black', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'right-sensor'}),
                html.Div("Atrás izquierdo: X cm", id='back-left-sensor', className='sensor-data', style={'backgroundColor': 'green', 'color': 'white', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'back-left'}),
                dbc.Button("ATRÁS", id='backward-btn', className='remote-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'back'}),
                html.Div("Atrás derecho: X cm", id='back-right-sensor', className='sensor-data', style={'backgroundColor': 'green', 'color': 'white', 'textAlign': 'center', 'padding': '10px', 'gridArea': 'back-right'}),
                dbc.Button("PARO DE EMERGENCIA", id='emergency-stop-btn', className='emergency-btn', style={'backgroundColor': 'red', 'color': 'white', 'width': '100%', 'height': '100px', 'gridArea': 'emergency'}),
                dbc.Button("TOMAR FOTO ANTES", id='capture-btn-before', className='capture-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'capture-before'}),
                dbc.Button("TOMAR FOTO DESPUÉS", id='capture-btn-after', className='capture-btn', style={'width': '100%', 'height': '100px', 'gridArea': 'capture-after'}),
            ], style={
                'display': 'grid',
                'gridTemplateColumns': '1fr 1fr 1fr 1fr',
                'gridTemplateRows': 'auto auto auto auto auto',
                'gridTemplateAreas': '''
                    'front-left forward forward front-right'
                    'left rotate-left rotate-right right'
                    'left-sensor . . right-sensor'
                    'back-left back back back-right'
                    'emergency emergency emergency emergency'
                    'capture-before capture-before capture-after capture-after'
                ''',
                'gridGap': '10px',
                'justifyContent': 'center',
                'alignItems': 'center',
                'padding': '20px'
            }),
            dbc.Row([
                dbc.Col(html.Div(id='images-container-before', style={'width': '100%', 'maxWidth': '600px', 'marginTop': '20px'}), width=6),
                dbc.Col(html.Div(id='images-container-after', style={'width': '100%', 'maxWidth': '600px', 'marginTop': '20px'}), width=6)
            ], justify='center', align='center'),
            dbc.Row([
                dbc.Col(html.Div(id='status-div', className='status-div', style={'marginTop': '20px', 'textAlign': 'center'}), width=12),
            ], justify='center', align='center')
        ])
    ], style={'width': '100%', 'maxWidth': '900px', 'margin': '0 auto'})
